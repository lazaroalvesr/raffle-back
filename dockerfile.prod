# Etapa de Build 
FROM node:20-alpine AS builder  

# Instala dependências necessárias para construir o projeto 
RUN apk add --no-cache \
    python3 \
    build-base \
    postgresql-client \
    openssl \
    ca-certificates    

WORKDIR /app  

# Copia os arquivos de pacotes e Prisma para instalação das dependências 
COPY package*.json ./
COPY prisma ./prisma  

# Copia os arquivos de configuração 
COPY tsconfig*.json ./  

# Copia os templates de email 
COPY templates ./templates

# Instala as dependências do projeto (modo produção)  
RUN npm ci  

# Gera os arquivos do Prisma  
RUN npx prisma generate  

# Copia o restante do código-fonte  
COPY . .  

# Gera a build do projeto para produção  
RUN npm run build  

# Etapa Final para Produção  
FROM node:20-alpine  

# Instala dependências necessárias para execução  
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    postgresql-client \
    openssl \
    bash    

WORKDIR /app  

# Copia os artefatos da etapa de build  
COPY --from=builder /app/dist ./dist 
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma ./prisma 
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/templates ./templates 
COPY --from=builder /app/src/scripts ./scripts
COPY --from=builder /app/tsconfig*.json ./ 

# Se tiver um script de wait for db, adicione 
COPY --from=builder /app/wait-for-db.sh ./    
RUN chmod +x ./wait-for-db.sh  

# Define variáveis de ambiente  
ENV NODE_ENV=production  

# Define a porta exposta  
EXPOSE 3000  

# Comando de inicialização para produção  
CMD ["sh", "-c", "./wait-for-db.sh && npx prisma migrate deploy && npm run start:prod"]