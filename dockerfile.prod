# Etapa de Build 
FROM node:20-alpine AS builder  

RUN apk add --no-cache \
    python3 \
    build-base \
    postgresql-client \
    openssl \
    ca-certificates    

WORKDIR /app  

# Copie apenas os arquivos essenciais primeiro
COPY package*.json ./
COPY prisma ./prisma/
COPY tsconfig*.json ./

# Instale as dependências sem executar scripts
RUN npm ci --ignore-scripts

# Gere os arquivos do Prisma explicitamente
RUN npm run prisma:generate

# Agora copie o resto do código
COPY . .
COPY templates ./templates

# Execute o build
RUN npm run build

# Etapa Final para Produção  
FROM node:20-alpine  

RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    postgresql-client \
    openssl \
    bash    

WORKDIR /app  

# Copie os artefatos necessários
COPY --from=builder /app/dist ./dist 
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma ./prisma 
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/templates ./templates 
COPY --from=builder /app/src/scripts ./scripts
COPY --from=builder /app/tsconfig*.json ./ 

COPY --from=builder /app/wait-for-db.sh ./    
RUN chmod +x ./wait-for-db.sh  

ENV NODE_ENV=production  

# Gere o Prisma Client novamente para o ambiente de produção
RUN npm run prisma:generate

EXPOSE 3000  

CMD ["sh", "-c", "./wait-for-db.sh && npx prisma migrate deploy && npm run start:prod"]