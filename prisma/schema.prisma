generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  surname           String
  email             String    @unique
  telephone         String
  password          String
  confirmationToken String?
  recoverToken      String?
  role              Rule      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  payments          Payment[]
  raffles           Raffle[]
  tickets           Ticket[]
}

model Raffle {
  id              String            @id @default(uuid())
  name            String
  description     String
  image           String
  startDate       DateTime
  endDate         DateTime
  quantityNumbers String
  ticketPrice     String
  userId          String
  drawDate        DrawRaffle?       @relation(fields: [drawRaffleId], references: [id])
  winnerTicketId  String?
  AvailableTicket AvailableTicket[]
  Payment         Payment[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  winnerTicket    Ticket?           @relation("RaffleWinner", fields: [winnerTicketId], references: [id])
  tickets         Ticket[]          @relation("RaffleTickets")
  drawRaffleId    String?
}

model AvailableTicket {
  id            String    @id @default(uuid())
  raffleId      String
  ticketNumber  Int
  isReserved    Boolean   @default(false)
  reservedUntil DateTime?
  isPurchased   Boolean   @default(false)
  raffle        Raffle    @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  @@unique([raffleId, ticketNumber])
}

model DrawRaffle {
  id     String   @id @default(uuid())
  date   DateTime
  Raffle Raffle[]
}

model Ticket {
  id         String   @id @default(uuid())
  number     Int[]
  userId     String
  raffleId   String
  dateBuy    DateTime @default(now())
  wonRaffles Raffle[] @relation("RaffleWinner")
  raffle     Raffle   @relation("RaffleTickets", fields: [raffleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  transactionId String        @unique
  userId        String
  raffleId      String
  amount        Float
  paymentMethod String
  status        PaymentStatus
  pixUrl        String
  qrCode        String?
  payerId       String?
  payerEmail    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ticketNumbers Int[]
  raffle        Raffle        @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, raffleId])
  @@index([transactionId])
}

enum Rule {
  ADM
  USER
}

enum PaymentStatus {
  pending
  approved
  rejected
  cancelled
}
